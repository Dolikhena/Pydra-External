# Form implementation generated from reading ui file '.\gui\layouts\stat_metrics.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(300, 400)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_2.setContentsMargins(6, 6, 6, 6)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.scrollArea = QtWidgets.QScrollArea(Dialog)
        self.scrollArea.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.scrollArea.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContentsOnFirstShow)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, -368, 271, 1801))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setContentsMargins(6, 6, 6, 6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.group_capture_metadata = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        self.group_capture_metadata.setMinimumSize(QtCore.QSize(170, 0))
        self.group_capture_metadata.setFlat(True)
        self.group_capture_metadata.setObjectName("group_capture_metadata")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.group_capture_metadata)
        self.verticalLayout_11.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.btn_toggle_capture_metadata = QtWidgets.QPushButton(self.group_capture_metadata)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_toggle_capture_metadata.sizePolicy().hasHeightForWidth())
        self.btn_toggle_capture_metadata.setSizePolicy(sizePolicy)
        self.btn_toggle_capture_metadata.setCheckable(True)
        self.btn_toggle_capture_metadata.setObjectName("btn_toggle_capture_metadata")
        self.verticalLayout_11.addWidget(self.btn_toggle_capture_metadata)
        self.check_metric_capture_type = QtWidgets.QCheckBox(self.group_capture_metadata)
        self.check_metric_capture_type.setObjectName("check_metric_capture_type")
        self.verticalLayout_11.addWidget(self.check_metric_capture_type)
        self.check_metric_capture_integrity = QtWidgets.QCheckBox(self.group_capture_metadata)
        self.check_metric_capture_integrity.setObjectName("check_metric_capture_integrity")
        self.verticalLayout_11.addWidget(self.check_metric_capture_integrity)
        self.check_metric_application = QtWidgets.QCheckBox(self.group_capture_metadata)
        self.check_metric_application.setEnabled(False)
        self.check_metric_application.setChecked(True)
        self.check_metric_application.setObjectName("check_metric_application")
        self.verticalLayout_11.addWidget(self.check_metric_application)
        self.check_metric_resolution = QtWidgets.QCheckBox(self.group_capture_metadata)
        self.check_metric_resolution.setEnabled(False)
        self.check_metric_resolution.setChecked(True)
        self.check_metric_resolution.setObjectName("check_metric_resolution")
        self.verticalLayout_11.addWidget(self.check_metric_resolution)
        self.check_metric_runtime = QtWidgets.QCheckBox(self.group_capture_metadata)
        self.check_metric_runtime.setEnabled(False)
        self.check_metric_runtime.setChecked(True)
        self.check_metric_runtime.setObjectName("check_metric_runtime")
        self.verticalLayout_11.addWidget(self.check_metric_runtime)
        self.check_metric_gpu = QtWidgets.QCheckBox(self.group_capture_metadata)
        self.check_metric_gpu.setEnabled(False)
        self.check_metric_gpu.setChecked(True)
        self.check_metric_gpu.setObjectName("check_metric_gpu")
        self.verticalLayout_11.addWidget(self.check_metric_gpu)
        self.check_metric_comments = QtWidgets.QCheckBox(self.group_capture_metadata)
        self.check_metric_comments.setEnabled(False)
        self.check_metric_comments.setChecked(True)
        self.check_metric_comments.setObjectName("check_metric_comments")
        self.verticalLayout_11.addWidget(self.check_metric_comments)
        self.check_metric_file_name = QtWidgets.QCheckBox(self.group_capture_metadata)
        self.check_metric_file_name.setObjectName("check_metric_file_name")
        self.verticalLayout_11.addWidget(self.check_metric_file_name)
        self.check_metric_file_path = QtWidgets.QCheckBox(self.group_capture_metadata)
        self.check_metric_file_path.setObjectName("check_metric_file_path")
        self.verticalLayout_11.addWidget(self.check_metric_file_path)
        self.verticalLayout.addWidget(self.group_capture_metadata)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.verticalLayout.addItem(spacerItem)
        self.group_display_metrics = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        self.group_display_metrics.setFlat(True)
        self.group_display_metrics.setObjectName("group_display_metrics")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.group_display_metrics)
        self.verticalLayout_21.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.btn_toggle_display_metrics = QtWidgets.QPushButton(self.group_display_metrics)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_toggle_display_metrics.sizePolicy().hasHeightForWidth())
        self.btn_toggle_display_metrics.setSizePolicy(sizePolicy)
        self.btn_toggle_display_metrics.setCheckable(True)
        self.btn_toggle_display_metrics.setObjectName("btn_toggle_display_metrics")
        self.verticalLayout_21.addWidget(self.btn_toggle_display_metrics)
        self.check_metric_duration = QtWidgets.QCheckBox(self.group_display_metrics)
        self.check_metric_duration.setObjectName("check_metric_duration")
        self.verticalLayout_21.addWidget(self.check_metric_duration)
        self.check_metric_frames = QtWidgets.QCheckBox(self.group_display_metrics)
        self.check_metric_frames.setObjectName("check_metric_frames")
        self.verticalLayout_21.addWidget(self.check_metric_frames)
        self.check_metric_synced_frames = QtWidgets.QCheckBox(self.group_display_metrics)
        self.check_metric_synced_frames.setObjectName("check_metric_synced_frames")
        self.verticalLayout_21.addWidget(self.check_metric_synced_frames)
        self.verticalLayout.addWidget(self.group_display_metrics)
        spacerItem1 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.verticalLayout.addItem(spacerItem1)
        self.group_performance_metrics = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        self.group_performance_metrics.setMinimumSize(QtCore.QSize(170, 0))
        self.group_performance_metrics.setFlat(True)
        self.group_performance_metrics.setObjectName("group_performance_metrics")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.group_performance_metrics)
        self.verticalLayout_24.setContentsMargins(0, 6, 0, 6)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.btn_toggle_performance_metrics = QtWidgets.QPushButton(self.group_performance_metrics)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_toggle_performance_metrics.sizePolicy().hasHeightForWidth())
        self.btn_toggle_performance_metrics.setSizePolicy(sizePolicy)
        self.btn_toggle_performance_metrics.setCheckable(True)
        self.btn_toggle_performance_metrics.setObjectName("btn_toggle_performance_metrics")
        self.verticalLayout_24.addWidget(self.btn_toggle_performance_metrics)
        self.info_label_performance = QtWidgets.QLabel(self.group_performance_metrics)
        self.info_label_performance.setTextFormat(QtCore.Qt.TextFormat.RichText)
        self.info_label_performance.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.info_label_performance.setWordWrap(True)
        self.info_label_performance.setObjectName("info_label_performance")
        self.verticalLayout_24.addWidget(self.info_label_performance)
        spacerItem2 = QtWidgets.QSpacerItem(20, 4, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.verticalLayout_24.addItem(spacerItem2)
        self.subgroup_performance_simple = QtWidgets.QGroupBox(self.group_performance_metrics)
        self.subgroup_performance_simple.setFlat(True)
        self.subgroup_performance_simple.setObjectName("subgroup_performance_simple")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.subgroup_performance_simple)
        self.verticalLayout_13.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.check_metric_min_fps = QtWidgets.QCheckBox(self.subgroup_performance_simple)
        self.check_metric_min_fps.setObjectName("check_metric_min_fps")
        self.verticalLayout_13.addWidget(self.check_metric_min_fps)
        self.check_metric_average_fps = QtWidgets.QCheckBox(self.subgroup_performance_simple)
        self.check_metric_average_fps.setObjectName("check_metric_average_fps")
        self.verticalLayout_13.addWidget(self.check_metric_average_fps)
        self.check_metric_median_fps = QtWidgets.QCheckBox(self.subgroup_performance_simple)
        self.check_metric_median_fps.setObjectName("check_metric_median_fps")
        self.verticalLayout_13.addWidget(self.check_metric_median_fps)
        self.check_metric_max_fps = QtWidgets.QCheckBox(self.subgroup_performance_simple)
        self.check_metric_max_fps.setObjectName("check_metric_max_fps")
        self.verticalLayout_13.addWidget(self.check_metric_max_fps)
        self.verticalLayout_24.addWidget(self.subgroup_performance_simple)
        self.subgroup_performance_low_pct = QtWidgets.QGroupBox(self.group_performance_metrics)
        self.subgroup_performance_low_pct.setFlat(True)
        self.subgroup_performance_low_pct.setObjectName("subgroup_performance_low_pct")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.subgroup_performance_low_pct)
        self.verticalLayout_3.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.info_label_low_pct = QtWidgets.QLabel(self.subgroup_performance_low_pct)
        self.info_label_low_pct.setWordWrap(True)
        self.info_label_low_pct.setObjectName("info_label_low_pct")
        self.verticalLayout_3.addWidget(self.info_label_low_pct)
        self.check_metric_low_0_1 = QtWidgets.QCheckBox(self.subgroup_performance_low_pct)
        self.check_metric_low_0_1.setObjectName("check_metric_low_0_1")
        self.verticalLayout_3.addWidget(self.check_metric_low_0_1)
        self.check_metric_low_1 = QtWidgets.QCheckBox(self.subgroup_performance_low_pct)
        self.check_metric_low_1.setObjectName("check_metric_low_1")
        self.verticalLayout_3.addWidget(self.check_metric_low_1)
        self.verticalLayout_24.addWidget(self.subgroup_performance_low_pct)
        self.subgroup_performance_trad_pct = QtWidgets.QGroupBox(self.group_performance_metrics)
        self.subgroup_performance_trad_pct.setFlat(True)
        self.subgroup_performance_trad_pct.setObjectName("subgroup_performance_trad_pct")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.subgroup_performance_trad_pct)
        self.verticalLayout_26.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_percentile_method = QtWidgets.QLabel(self.subgroup_performance_trad_pct)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_percentile_method.sizePolicy().hasHeightForWidth())
        self.label_percentile_method.setSizePolicy(sizePolicy)
        self.label_percentile_method.setObjectName("label_percentile_method")
        self.horizontalLayout_2.addWidget(self.label_percentile_method)
        self.combo_percentile_method = QtWidgets.QComboBox(self.subgroup_performance_trad_pct)
        self.combo_percentile_method.setMaxCount(2)
        self.combo_percentile_method.setObjectName("combo_percentile_method")
        self.combo_percentile_method.addItem("")
        self.combo_percentile_method.addItem("")
        self.horizontalLayout_2.addWidget(self.combo_percentile_method)
        self.verticalLayout_26.addLayout(self.horizontalLayout_2)
        self.check_metric_pct_0_1 = QtWidgets.QCheckBox(self.subgroup_performance_trad_pct)
        self.check_metric_pct_0_1.setObjectName("check_metric_pct_0_1")
        self.verticalLayout_26.addWidget(self.check_metric_pct_0_1)
        self.check_metric_pct_1 = QtWidgets.QCheckBox(self.subgroup_performance_trad_pct)
        self.check_metric_pct_1.setObjectName("check_metric_pct_1")
        self.verticalLayout_26.addWidget(self.check_metric_pct_1)
        self.check_metric_pct_5 = QtWidgets.QCheckBox(self.subgroup_performance_trad_pct)
        self.check_metric_pct_5.setObjectName("check_metric_pct_5")
        self.verticalLayout_26.addWidget(self.check_metric_pct_5)
        self.check_metric_pct_10 = QtWidgets.QCheckBox(self.subgroup_performance_trad_pct)
        self.check_metric_pct_10.setObjectName("check_metric_pct_10")
        self.verticalLayout_26.addWidget(self.check_metric_pct_10)
        self.verticalLayout_24.addWidget(self.subgroup_performance_trad_pct)
        self.subgroup_performance_relative = QtWidgets.QGroupBox(self.group_performance_metrics)
        self.subgroup_performance_relative.setFlat(True)
        self.subgroup_performance_relative.setObjectName("subgroup_performance_relative")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.subgroup_performance_relative)
        self.verticalLayout_27.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.check_metric_low_0_1_over_avg = QtWidgets.QCheckBox(self.subgroup_performance_relative)
        self.check_metric_low_0_1_over_avg.setObjectName("check_metric_low_0_1_over_avg")
        self.verticalLayout_27.addWidget(self.check_metric_low_0_1_over_avg)
        self.check_metric_pct_0_1_over_avg = QtWidgets.QCheckBox(self.subgroup_performance_relative)
        self.check_metric_pct_0_1_over_avg.setObjectName("check_metric_pct_0_1_over_avg")
        self.verticalLayout_27.addWidget(self.check_metric_pct_0_1_over_avg)
        self.check_metric_low_1_over_avg = QtWidgets.QCheckBox(self.subgroup_performance_relative)
        self.check_metric_low_1_over_avg.setObjectName("check_metric_low_1_over_avg")
        self.verticalLayout_27.addWidget(self.check_metric_low_1_over_avg)
        self.check_metric_pct_1_over_avg = QtWidgets.QCheckBox(self.subgroup_performance_relative)
        self.check_metric_pct_1_over_avg.setObjectName("check_metric_pct_1_over_avg")
        self.verticalLayout_27.addWidget(self.check_metric_pct_1_over_avg)
        self.check_metric_pct_5_over_avg = QtWidgets.QCheckBox(self.subgroup_performance_relative)
        self.check_metric_pct_5_over_avg.setObjectName("check_metric_pct_5_over_avg")
        self.verticalLayout_27.addWidget(self.check_metric_pct_5_over_avg)
        self.check_metric_pct_10_over_avg = QtWidgets.QCheckBox(self.subgroup_performance_relative)
        self.check_metric_pct_10_over_avg.setObjectName("check_metric_pct_10_over_avg")
        self.verticalLayout_27.addWidget(self.check_metric_pct_10_over_avg)
        self.verticalLayout_24.addWidget(self.subgroup_performance_relative)
        self.verticalLayout.addWidget(self.group_performance_metrics)
        spacerItem3 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.verticalLayout.addItem(spacerItem3)
        self.group_stutter_metrics = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        self.group_stutter_metrics.setMinimumSize(QtCore.QSize(170, 0))
        self.group_stutter_metrics.setFlat(True)
        self.group_stutter_metrics.setObjectName("group_stutter_metrics")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.group_stutter_metrics)
        self.verticalLayout_14.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.btn_toggle_stutter_metrics = QtWidgets.QPushButton(self.group_stutter_metrics)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_toggle_stutter_metrics.sizePolicy().hasHeightForWidth())
        self.btn_toggle_stutter_metrics.setSizePolicy(sizePolicy)
        self.btn_toggle_stutter_metrics.setCheckable(True)
        self.btn_toggle_stutter_metrics.setObjectName("btn_toggle_stutter_metrics")
        self.verticalLayout_14.addWidget(self.btn_toggle_stutter_metrics)
        self.check_metric_stutter_number = QtWidgets.QCheckBox(self.group_stutter_metrics)
        self.check_metric_stutter_number.setObjectName("check_metric_stutter_number")
        self.verticalLayout_14.addWidget(self.check_metric_stutter_number)
        self.check_metric_stutter_proportional = QtWidgets.QCheckBox(self.group_stutter_metrics)
        self.check_metric_stutter_proportional.setChecked(False)
        self.check_metric_stutter_proportional.setObjectName("check_metric_stutter_proportional")
        self.verticalLayout_14.addWidget(self.check_metric_stutter_proportional)
        self.check_metric_stutter_average = QtWidgets.QCheckBox(self.group_stutter_metrics)
        self.check_metric_stutter_average.setChecked(False)
        self.check_metric_stutter_average.setObjectName("check_metric_stutter_average")
        self.verticalLayout_14.addWidget(self.check_metric_stutter_average)
        self.check_metric_stutter_max = QtWidgets.QCheckBox(self.group_stutter_metrics)
        self.check_metric_stutter_max.setChecked(False)
        self.check_metric_stutter_max.setObjectName("check_metric_stutter_max")
        self.verticalLayout_14.addWidget(self.check_metric_stutter_max)
        self.verticalLayout.addWidget(self.group_stutter_metrics)
        spacerItem4 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.verticalLayout.addItem(spacerItem4)
        self.group_hardware_metrics = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
        self.group_hardware_metrics.setMinimumSize(QtCore.QSize(170, 0))
        self.group_hardware_metrics.setFlat(True)
        self.group_hardware_metrics.setObjectName("group_hardware_metrics")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.group_hardware_metrics)
        self.verticalLayout_18.setContentsMargins(0, 6, 0, 6)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.btn_toggle_hardware_metrics = QtWidgets.QPushButton(self.group_hardware_metrics)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_toggle_hardware_metrics.sizePolicy().hasHeightForWidth())
        self.btn_toggle_hardware_metrics.setSizePolicy(sizePolicy)
        self.btn_toggle_hardware_metrics.setCheckable(True)
        self.btn_toggle_hardware_metrics.setObjectName("btn_toggle_hardware_metrics")
        self.verticalLayout_18.addWidget(self.btn_toggle_hardware_metrics)
        self.subgroup_hardware_gpu = QtWidgets.QGroupBox(self.group_hardware_metrics)
        self.subgroup_hardware_gpu.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.subgroup_hardware_gpu.setFlat(True)
        self.subgroup_hardware_gpu.setObjectName("subgroup_hardware_gpu")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout(self.subgroup_hardware_gpu)
        self.verticalLayout_28.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.check_metric_present_latency = QtWidgets.QCheckBox(self.subgroup_hardware_gpu)
        self.check_metric_present_latency.setObjectName("check_metric_present_latency")
        self.verticalLayout_28.addWidget(self.check_metric_present_latency)
        self.check_metric_perf_per_watt = QtWidgets.QCheckBox(self.subgroup_hardware_gpu)
        self.check_metric_perf_per_watt.setObjectName("check_metric_perf_per_watt")
        self.verticalLayout_28.addWidget(self.check_metric_perf_per_watt)
        self.check_metric_gpu_board_power = QtWidgets.QCheckBox(self.subgroup_hardware_gpu)
        self.check_metric_gpu_board_power.setObjectName("check_metric_gpu_board_power")
        self.verticalLayout_28.addWidget(self.check_metric_gpu_board_power)
        self.check_metric_gpu_chip_power = QtWidgets.QCheckBox(self.subgroup_hardware_gpu)
        self.check_metric_gpu_chip_power.setObjectName("check_metric_gpu_chip_power")
        self.verticalLayout_28.addWidget(self.check_metric_gpu_chip_power)
        self.check_metric_gpu_frequency = QtWidgets.QCheckBox(self.subgroup_hardware_gpu)
        self.check_metric_gpu_frequency.setObjectName("check_metric_gpu_frequency")
        self.verticalLayout_28.addWidget(self.check_metric_gpu_frequency)
        self.check_metric_gpu_temperature = QtWidgets.QCheckBox(self.subgroup_hardware_gpu)
        self.check_metric_gpu_temperature.setObjectName("check_metric_gpu_temperature")
        self.verticalLayout_28.addWidget(self.check_metric_gpu_temperature)
        self.check_metric_gpu_utilization = QtWidgets.QCheckBox(self.subgroup_hardware_gpu)
        self.check_metric_gpu_utilization.setObjectName("check_metric_gpu_utilization")
        self.verticalLayout_28.addWidget(self.check_metric_gpu_utilization)
        self.check_metric_gpu_voltage = QtWidgets.QCheckBox(self.subgroup_hardware_gpu)
        self.check_metric_gpu_voltage.setObjectName("check_metric_gpu_voltage")
        self.verticalLayout_28.addWidget(self.check_metric_gpu_voltage)
        self.verticalLayout_18.addWidget(self.subgroup_hardware_gpu)
        self.subgroup_hardware_cpu = QtWidgets.QGroupBox(self.group_hardware_metrics)
        self.subgroup_hardware_cpu.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.subgroup_hardware_cpu.setFlat(True)
        self.subgroup_hardware_cpu.setObjectName("subgroup_hardware_cpu")
        self.verticalLayout_29 = QtWidgets.QVBoxLayout(self.subgroup_hardware_cpu)
        self.verticalLayout_29.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.check_metric_cpu_power = QtWidgets.QCheckBox(self.subgroup_hardware_cpu)
        self.check_metric_cpu_power.setObjectName("check_metric_cpu_power")
        self.verticalLayout_29.addWidget(self.check_metric_cpu_power)
        self.check_metric_cpu_frequency = QtWidgets.QCheckBox(self.subgroup_hardware_cpu)
        self.check_metric_cpu_frequency.setObjectName("check_metric_cpu_frequency")
        self.verticalLayout_29.addWidget(self.check_metric_cpu_frequency)
        self.check_metric_cpu_temperature = QtWidgets.QCheckBox(self.subgroup_hardware_cpu)
        self.check_metric_cpu_temperature.setObjectName("check_metric_cpu_temperature")
        self.verticalLayout_29.addWidget(self.check_metric_cpu_temperature)
        self.check_metric_cpu_utilization = QtWidgets.QCheckBox(self.subgroup_hardware_cpu)
        self.check_metric_cpu_utilization.setObjectName("check_metric_cpu_utilization")
        self.verticalLayout_29.addWidget(self.check_metric_cpu_utilization)
        self.verticalLayout_18.addWidget(self.subgroup_hardware_cpu)
        self.subgroup_hardware_battery = QtWidgets.QGroupBox(self.group_hardware_metrics)
        self.subgroup_hardware_battery.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.subgroup_hardware_battery.setFlat(True)
        self.subgroup_hardware_battery.setObjectName("subgroup_hardware_battery")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.subgroup_hardware_battery)
        self.verticalLayout_30.setContentsMargins(0, 6, 0, 12)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.check_metric_battery_charge = QtWidgets.QCheckBox(self.subgroup_hardware_battery)
        self.check_metric_battery_charge.setObjectName("check_metric_battery_charge")
        self.verticalLayout_30.addWidget(self.check_metric_battery_charge)
        self.check_metric_battery_life = QtWidgets.QCheckBox(self.subgroup_hardware_battery)
        self.check_metric_battery_life.setObjectName("check_metric_battery_life")
        self.verticalLayout_30.addWidget(self.check_metric_battery_life)
        self.verticalLayout_18.addWidget(self.subgroup_hardware_battery)
        self.verticalLayout.addWidget(self.group_hardware_metrics)
        spacerItem5 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout.addItem(spacerItem5)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_2.addWidget(self.scrollArea)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem6)
        self.btn_ok = QtWidgets.QPushButton(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_ok.sizePolicy().hasHeightForWidth())
        self.btn_ok.setSizePolicy(sizePolicy)
        self.btn_ok.setMinimumSize(QtCore.QSize(75, 0))
        self.btn_ok.setDefault(True)
        self.btn_ok.setObjectName("btn_ok")
        self.horizontalLayout.addWidget(self.btn_ok)
        self.btn_cancel = QtWidgets.QPushButton(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_cancel.sizePolicy().hasHeightForWidth())
        self.btn_cancel.setSizePolicy(sizePolicy)
        self.btn_cancel.setMinimumSize(QtCore.QSize(75, 0))
        self.btn_cancel.setAutoDefault(False)
        self.btn_cancel.setObjectName("btn_cancel")
        self.horizontalLayout.addWidget(self.btn_cancel)
        self.verticalLayout_2.addLayout(self.horizontalLayout)

        self.retranslateUi(Dialog)
        self.combo_percentile_method.setCurrentIndex(0)
        self.btn_toggle_capture_metadata.clicked['bool'].connect(self.check_metric_capture_type.setChecked) # type: ignore
        self.btn_toggle_capture_metadata.clicked['bool'].connect(self.check_metric_capture_integrity.setChecked) # type: ignore
        self.btn_toggle_capture_metadata.clicked['bool'].connect(self.check_metric_file_name.setChecked) # type: ignore
        self.btn_toggle_capture_metadata.clicked['bool'].connect(self.check_metric_file_path.setChecked) # type: ignore
        self.btn_toggle_display_metrics.clicked['bool'].connect(self.check_metric_duration.setChecked) # type: ignore
        self.btn_toggle_display_metrics.clicked['bool'].connect(self.check_metric_frames.setChecked) # type: ignore
        self.btn_toggle_display_metrics.clicked['bool'].connect(self.check_metric_synced_frames.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_present_latency.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_perf_per_watt.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_gpu_board_power.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_gpu_chip_power.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_gpu_frequency.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_gpu_temperature.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_gpu_utilization.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_gpu_voltage.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_cpu_power.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_cpu_frequency.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_cpu_temperature.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_cpu_utilization.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_battery_charge.setChecked) # type: ignore
        self.btn_toggle_hardware_metrics.clicked['bool'].connect(self.check_metric_battery_life.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_average_fps.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_min_fps.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_max_fps.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_pct_0_1_over_avg.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_pct_1_over_avg.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_pct_5_over_avg.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.toggled['bool'].connect(self.check_metric_pct_10_over_avg.setChecked) # type: ignore
        self.btn_ok.clicked.connect(Dialog.accept) # type: ignore
        self.btn_cancel.clicked.connect(Dialog.reject) # type: ignore
        self.btn_toggle_stutter_metrics.clicked['bool'].connect(self.check_metric_stutter_number.setChecked) # type: ignore
        self.btn_toggle_stutter_metrics.clicked['bool'].connect(self.check_metric_stutter_proportional.setChecked) # type: ignore
        self.btn_toggle_stutter_metrics.clicked['bool'].connect(self.check_metric_stutter_average.setChecked) # type: ignore
        self.btn_toggle_stutter_metrics.clicked['bool'].connect(self.check_metric_stutter_max.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_low_0_1.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_low_1.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_low_0_1_over_avg.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_low_1_over_avg.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_median_fps.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_pct_10.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_pct_1.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_pct_5.setChecked) # type: ignore
        self.btn_toggle_performance_metrics.clicked['bool'].connect(self.check_metric_pct_0_1.setChecked) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Statistics Metrics"))
        self.group_capture_metadata.setTitle(_translate("Dialog", "Capture Metadata"))
        self.btn_toggle_capture_metadata.setText(_translate("Dialog", "Toggle Section"))
        self.check_metric_capture_type.setText(_translate("Dialog", "Capture Type"))
        self.check_metric_capture_integrity.setText(_translate("Dialog", "Capture Integrity"))
        self.check_metric_application.setText(_translate("Dialog", "Application"))
        self.check_metric_resolution.setText(_translate("Dialog", "Resolution"))
        self.check_metric_runtime.setText(_translate("Dialog", "Runtime"))
        self.check_metric_gpu.setText(_translate("Dialog", "GPU"))
        self.check_metric_comments.setText(_translate("Dialog", "Comments"))
        self.check_metric_file_name.setText(_translate("Dialog", "File Name"))
        self.check_metric_file_path.setText(_translate("Dialog", "File Path"))
        self.group_display_metrics.setTitle(_translate("Dialog", " Display"))
        self.btn_toggle_display_metrics.setText(_translate("Dialog", "Toggle Section"))
        self.check_metric_duration.setText(_translate("Dialog", "Duration"))
        self.check_metric_frames.setText(_translate("Dialog", "Number of Frames"))
        self.check_metric_synced_frames.setText(_translate("Dialog", "Synchronized Frames"))
        self.group_performance_metrics.setTitle(_translate("Dialog", "Performance"))
        self.btn_toggle_performance_metrics.setText(_translate("Dialog", "Toggle Section"))
        self.info_label_performance.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-weight:600;\">Note</span>: All calculations for this section are based from raw frame time values and then converted to frames per second.</p></body></html>"))
        self.subgroup_performance_simple.setTitle(_translate("Dialog", "Simple Frame Rate Metrics"))
        self.check_metric_min_fps.setText(_translate("Dialog", "Minimum FPS"))
        self.check_metric_average_fps.setText(_translate("Dialog", "Average FPS"))
        self.check_metric_median_fps.setText(_translate("Dialog", "Median FPS"))
        self.check_metric_max_fps.setText(_translate("Dialog", "Maximum FPS"))
        self.subgroup_performance_low_pct.setTitle(_translate("Dialog", "Low Frame Rate Percentiles"))
        self.info_label_low_pct.setText(_translate("Dialog", "\"Low\" percentiles take the average of all frame times that meet or exceed a percentile rank, allowing stutter to influence the value to some degree."))
        self.check_metric_low_0_1.setText(_translate("Dialog", "0.1% Low"))
        self.check_metric_low_1.setText(_translate("Dialog", "1% Low"))
        self.subgroup_performance_trad_pct.setTitle(_translate("Dialog", "Traditional Frame Rate Percentiles"))
        self.label_percentile_method.setToolTip(_translate("Dialog", "<html><head/><body><p>Percentile calculations for frame time intervals can either use the full data set (<span style=\" font-weight:600;\">inclusive</span>) or with a portion of the smallest/largest values omitted (<span style=\" font-weight:600;\">exclusive</span>). FrameView provides exclusive percentiles in the summary log file.</p><p><span style=\" font-weight:600;\">NOTE</span>: There are two noteable consequences of the exclusive method: 1) a minumum number of frames is required to calculate a given percentile rank (e.g., calculating the 1st percentile will require at least 100 frames), and; 2) this compresses the total percentile range, especially with a small number of frames, and so any clipped values are clamped to the min/max value.</p></body></html>"))
        self.label_percentile_method.setText(_translate("Dialog", "Percentile Method"))
        self.combo_percentile_method.setToolTip(_translate("Dialog", "<html><head/><body><p>Percentile calculations for frame time intervals can either use the full data set (<span style=\" font-weight:600;\">inclusive</span>) or with a portion of the smallest/largest values omitted (<span style=\" font-weight:600;\">exclusive</span>). FrameView provides exclusive percentiles in the summary log file.</p><p><span style=\" font-weight:600;\">NOTE</span>: There are two noteable consequences of the exclusive method: 1) a minumum number of frames is required to calculate a given percentile rank (e.g., calculating the 1st percentile will require at least 100 frames), and; 2) this compresses the total percentile range, especially with a small number of frames, and so any clipped values are clamped to the min/max value.</p></body></html>"))
        self.combo_percentile_method.setItemText(0, _translate("Dialog", "Inclusive"))
        self.combo_percentile_method.setItemText(1, _translate("Dialog", "Exclusive"))
        self.check_metric_pct_0_1.setText(_translate("Dialog", "0.1%"))
        self.check_metric_pct_1.setText(_translate("Dialog", "1%"))
        self.check_metric_pct_5.setText(_translate("Dialog", "5%"))
        self.check_metric_pct_10.setText(_translate("Dialog", "10%"))
        self.subgroup_performance_relative.setTitle(_translate("Dialog", "Relative Frame Rate Metrics"))
        self.check_metric_low_0_1_over_avg.setText(_translate("Dialog", "0.1% Low / Average FPS"))
        self.check_metric_pct_0_1_over_avg.setText(_translate("Dialog", "0.1% / Average FPS"))
        self.check_metric_low_1_over_avg.setText(_translate("Dialog", "1% Low / Average FPS"))
        self.check_metric_pct_1_over_avg.setText(_translate("Dialog", "1% / Average FPS"))
        self.check_metric_pct_5_over_avg.setText(_translate("Dialog", "5% / Average FPS"))
        self.check_metric_pct_10_over_avg.setText(_translate("Dialog", "10% / Average FPS"))
        self.group_stutter_metrics.setTitle(_translate("Dialog", "Stuttering"))
        self.btn_toggle_stutter_metrics.setText(_translate("Dialog", "Toggle Section"))
        self.check_metric_stutter_number.setText(_translate("Dialog", "Number of Stutter Events"))
        self.check_metric_stutter_proportional.setText(_translate("Dialog", "Proportional Stutter"))
        self.check_metric_stutter_average.setText(_translate("Dialog", "Average Stutter"))
        self.check_metric_stutter_max.setText(_translate("Dialog", "Maximum Stutter"))
        self.group_hardware_metrics.setTitle(_translate("Dialog", "Hardware"))
        self.btn_toggle_hardware_metrics.setText(_translate("Dialog", "Toggle Section"))
        self.subgroup_hardware_gpu.setTitle(_translate("Dialog", "GPU Metrics"))
        self.check_metric_present_latency.setText(_translate("Dialog", "Average Present Latency"))
        self.check_metric_perf_per_watt.setText(_translate("Dialog", "Average Perf-per-Watt"))
        self.check_metric_gpu_board_power.setText(_translate("Dialog", "Average GPU Board Power"))
        self.check_metric_gpu_chip_power.setText(_translate("Dialog", "Average GPU Chip Power"))
        self.check_metric_gpu_frequency.setText(_translate("Dialog", "Average GPU Frequency"))
        self.check_metric_gpu_temperature.setText(_translate("Dialog", "Average GPU Temperature"))
        self.check_metric_gpu_utilization.setText(_translate("Dialog", "Average GPU Utilization"))
        self.check_metric_gpu_voltage.setText(_translate("Dialog", "Average GPU Voltage"))
        self.subgroup_hardware_cpu.setTitle(_translate("Dialog", "CPU Metrics"))
        self.check_metric_cpu_power.setText(_translate("Dialog", "Average CPU Power"))
        self.check_metric_cpu_frequency.setText(_translate("Dialog", "Average CPU Frequency"))
        self.check_metric_cpu_temperature.setText(_translate("Dialog", "Average CPU Temperature"))
        self.check_metric_cpu_utilization.setText(_translate("Dialog", "Average CPU Utilization"))
        self.subgroup_hardware_battery.setTitle(_translate("Dialog", "Battery Metrics"))
        self.check_metric_battery_charge.setText(_translate("Dialog", "Average Battery Charge Rate"))
        self.check_metric_battery_life.setText(_translate("Dialog", "Projected Battery Life"))
        self.btn_ok.setText(_translate("Dialog", "OK"))
        self.btn_cancel.setText(_translate("Dialog", "Cancel"))
